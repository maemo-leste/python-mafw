/* -*- Mode: C; c-basic-offset: 4 -*-
 * python-mafw - Python bindings for the MAFW library.
 *
 *   mafw.override: overrides for the mafw module.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 */
%%
headers
#define NO_IMPORT_PYGOBJECT
#include <pygobject.h>
#include <Python.h>

#include "mafw-includes.h"
#include "mafw-types.h"

%%
modulename mafw

%%
import gobject.GObject as PyGObject_Type
import gobject.GObject as PyGInitiallyUnowned_Type

%%
ignore-glob *_get_type

%%
override mafw_playlist_manager_get noargs staticmethod
static PyObject *
_wrap_mafw_playlist_manager_get(PyGObject *self)
{
    MafwPlaylistManager *manager;

    manager = mafw_playlist_manager_get();

    return pygobject_new((GObject *)manager);
}

%%
override mafw_registry_get_instance noargs staticmethod
static PyObject *
_wrap_mafw_registry_get_instance(PyGObject *self)
{
    MafwRegistry *registry = NULL;

    registry = mafw_registry_get_instance();

    return pygobject_new((GObject *)registry);
}

%%
override mafw_playlist_manager_get_playlists noargs
static PyObject *
_wrap_mafw_playlist_manager_get_playlists(PyGObject *self)
{
    GPtrArray *list = NULL;
    PyObject *py_list;
    GError *errp = NULL;
    gint i;

    list = mafw_playlist_manager_get_playlists(MAFW_PLAYLIST_MANAGER(self->obj), &errp);

    if (pyg_error_check(&errp))
        return NULL;

    if (list == NULL) {
        PyErr_SetString(PyExc_RuntimeError, "could not get playlists");
        return NULL;
    }

    if ((py_list = PyList_New(list->len)) == NULL)
        return NULL;

    for (i = 0; i < list->len; i++) {
        MafwPlaylist *pl = (MafwPlaylist *)g_ptr_array_index (list, i);
        PyObject *item = pygobject_new((GObject *)pl);
        PyList_SetItem(py_list, i, item);
    }
    /* FIXME: currently leaks memory for the GPtrArray. */

    return py_list;
}

%%
override mafw_registry_get_renderers noargs
static PyObject *
_wrap_mafw_registry_get_renderers(PyGObject *self)
{
    GList *wlist;
    guint nwlist;
    int i;
    PyObject *list;

    wlist = mafw_registry_get_renderers(MAFW_REGISTRY(self->obj));
    nwlist = g_list_length(wlist);

    if ((list = PyList_New(nwlist)) == NULL)
        return NULL;

    for (i = 0; i < nwlist; i++) {
        PyObject *item = pygobject_new((GObject *)g_list_nth_data(wlist, i));
        PyList_SetItem(list, i, item);
    }

    return list;
}

%%
override mafw_registry_add_extension kwargs
static PyObject *
_wrap_mafw_registry_add_extension(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "extension", NULL };
    PyGObject *extension;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:MafwRegistry.add_extension",
                                     kwlist, &PyMafwExtension_Type, &extension))
        return NULL;

    mafw_registry_add_extension(MAFW_REGISTRY(self->obj), MAFW_EXTENSION(extension->obj));

    Py_INCREF(Py_None);
    return Py_None;
}

%%
override mafw_registry_get_sources noargs
static PyObject *
_wrap_mafw_registry_get_sources(PyGObject *self)
{
    GList *wlist;
    guint nwlist;
    int i;
    PyObject *list;

    wlist = mafw_registry_get_sources(MAFW_REGISTRY(self->obj));
    nwlist = g_list_length(wlist);

    if ((list = PyList_New(nwlist)) == NULL)
        return NULL;

    for (i = 0; i < nwlist; i++) {
        PyObject *item = pygobject_new((GObject *)g_list_nth_data(wlist, i));
        PyList_SetItem(list, i, item);
    }

    return list;
}

%%
override mafw_registry_list_plugins noargs
static PyObject *
_wrap_mafw_registry_list_plugins(PyGObject *self)
{
    GList *wlist = NULL;
    guint nwlist;
    int i;
    PyObject *list = NULL;

    wlist = mafw_registry_list_plugins(MAFW_REGISTRY(self->obj));

    nwlist = g_list_length(wlist);

    if ((list = PyList_New(nwlist)) == NULL)
        return NULL;

    for (i = 0; i < nwlist; i++) {
        PyObject *pyitem = NULL;
        PyObject *attr = NULL;

        MafwPluginDescriptorPublic *item = (MafwPluginDescriptorPublic*)g_list_nth_data(wlist, i);
        if (!item) {
            PyErr_SetString(PyExc_RuntimeError, "Invalid plugin descriptor found");
            if (wlist)
                g_list_free(wlist);
            return NULL;
        }

        pyitem = PyTuple_New(3);

        if (item->name) {
            attr = PyString_FromString(item->name);
        } else{
            attr = Py_None;
            Py_INCREF(attr);
        }
        PyTuple_SetItem(pyitem, 0, attr);

        if (item->description) {
            attr = PyString_FromString(item->description);
        } else{
            attr = Py_None;
            Py_INCREF(attr);
        }
        PyTuple_SetItem(pyitem, 1, attr);


        if (item->version) {
            attr = PyString_FromString(item->version);
        } else{
            attr = Py_None;
            Py_INCREF(attr);
        }
        PyTuple_SetItem(pyitem, 2, attr);

        PyList_SetItem(list, i, pyitem);
    }
    if (wlist) {
        g_list_free(wlist);
    }

    return list;
}

%%
override mafw_source_browse kwargs

static
PyObject *
ghashtable_to_pydict(const GHashTable *table)
{
    PyObject *pytable = PyDict_New();
    GList *keys = NULL;
    GList *current_key = NULL;

    keys = g_hash_table_get_keys(table);
    current_key = keys;

    while (current_key) {
        PyObject *pyvalue;

        GValue *value = g_hash_table_lookup(table, current_key->data);
        const gchar *key = (const gchar *)current_key->data;

        if (G_VALUE_HOLDS_STRING(value)) {
            pyvalue = PyString_FromString(g_value_get_string(value));
        } else if (G_VALUE_HOLDS_INT(value)) {
            pyvalue = PyInt_FromLong(g_value_get_int(value));
        } else { // TODO Support other stuff
            pyvalue = Py_None;
            Py_XINCREF(pyvalue);
        }

        PyDict_SetItemString(pytable, key, pyvalue);

        current_key = g_list_next(current_key);
    }

    if (keys)
        g_list_free(keys);

    return pytable;
}

/**
 * Callback for mafw.Source.browse
 */
void
pymafw_browse_cb(MafwSource *self, guint browse_id, gint remaining_count,
                 guint index, const char *object_id, GHashTable *metadata,
                 gpointer user_data, const GError *error)
{
    PyObject *pymetadata = NULL;
    PyObject *pycallback = (PyObject *)user_data;
    PyObject *pyargs = NULL;
    PyGILState_STATE gil_lock;


    if (error) {
        PyErr_SetString(PyExc_RuntimeError, error->message);
        PyErr_Print();
        return;
    }

    gil_lock = PyGILState_Ensure();

    if (object_id == NULL) {
        g_debug("Object_id null, returning");
        Py_XDECREF((PyObject *)user_data); // Finished, callback not needed anymore
        goto cleanup;
    }

    pymetadata = ghashtable_to_pydict(metadata);

    pyargs = PyTuple_New(6); // TODO Support user_data?

    PyTuple_SetItem(pyargs, 0, pygobject_new(self));
    PyTuple_SetItem(pyargs, 1, PyInt_FromLong(browse_id));
    PyTuple_SetItem(pyargs, 2, PyInt_FromLong(remaining_count));
    PyTuple_SetItem(pyargs, 3, PyInt_FromLong(index));
    PyTuple_SetItem(pyargs, 4, PyString_FromString(object_id));
    PyTuple_SetItem(pyargs, 5, pymetadata);


    PyObject_Call(pycallback, pyargs, PyDict_New());

    if (PyErr_Occurred())
        PyErr_Print();

cleanup:

    if (pyargs)
        Py_XDECREF(pyargs);

    if (pymetadata)
        Py_XDECREF(pymetadata);

    PyGILState_Release(gil_lock);

    return;
}

/**
 * mafw.Source.browse
 *
 * Arguments:
 *
 * Requided
 * object_id
 * filter // mafw.Filter or string
 * callback
 *
 * Optional
 * recursive=False/0
 * sort_criteria="+name"
 * metadata_keys = NULL
 * skip_count = 0
 * item_count = 0
 * data=None - Not supported yet
 */
static PyObject *
_wrap_mafw_source_browse(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "object_id", "filter", "callback", "recursive",
                              "sort", "keys", "count",
                              "count", "data", NULL };

    char *object_id = NULL;
    PyObject *pyfilter = NULL;
    PyObject *pycallback = NULL;
    int recursive = 0;
    char *sort_criteria = "+name"; /* Should we require this? */
    PyObject *pymetadata_keys = NULL;
    int skip_count = 0;
    int item_count = MAFW_SOURCE_BROWSE_ALL;
    PyObject *pydata = NULL;

    MafwFilter *filter = NULL;

    char **metadata_keys = NULL;
    int i = 0;
    int size;

    int browse_id = MAFW_SOURCE_ERROR_INVALID_BROWSE_ID;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "sOO|isOiiO:mafw.Source.browse",
                                     kwlist, &object_id, &pyfilter, &pycallback,
                                     &recursive, &sort_criteria, &pymetadata_keys,
                                     &skip_count, &item_count, &pydata))
        return NULL;

    /* Check filter */
    if (PyString_Check(pyfilter)) {
        filter = mafw_filter_parse(PyString_AsString(pyfilter));
    } else { // TODO Support mafw.Filter
        PyErr_SetString(PyExc_TypeError, "filter must be a string");
        goto cleanup;
    }

    /* Check callback */
    if (!PyCallable_Check(pycallback)) {
        PyErr_SetString(PyExc_TypeError, "Callback must be a callable");
        goto cleanup;
    }
    /* Convert metadata keys */
    if (pymetadata_keys == Py_None || pymetadata_keys == NULL) {
        // Empty on purpose
    } else if (PySequence_Check(pymetadata_keys) && !PyString_Check(pymetadata_keys)) {
        size = PySequence_Size(pymetadata_keys);
        metadata_keys = g_new(char **, size+1);
        for (i = 0; i < size; i++) {
            PyObject *key = PySequence_GetItem(pymetadata_keys, i);
            if (!PyString_Check(key)) {
                PyErr_SetString(PyExc_TypeError, "Metadata keys must be a sequence of strings");
                goto cleanup;
            }
            metadata_keys[i] = PyString_AsString(key);
        }
        metadata_keys[size] = NULL;
    } else {
        PyErr_SetString(PyExc_TypeError, "Metadata keys must be a sequence of strings or None");
        goto cleanup;
    }

    Py_XINCREF(pycallback);

    /* TODO Currently we do not allow the user sending user data */
    browse_id = mafw_source_browse(MAFW_SOURCE(self->obj),
                                   object_id,
                                   recursive,
                                   filter,
                                   sort_criteria,
                                   metadata_keys,
                                   skip_count,
                                   item_count,
                                   pymafw_browse_cb,
                                   pycallback);

cleanup:
    if (filter)
        mafw_filter_free(filter);

    if (metadata_keys)
        g_free(metadata_keys);

    if (PyErr_Occurred())
        return NULL;
    else
        return Py_BuildValue("i", browse_id);
}

%%
define METADATA_KEY_CHILDCOUNT
static PyObject *
_wrap_METADATA_KEY_CHILDCOUNT(PyGObject *self, PyObject *args)
{
    int n;

    if (!PyArg_ParseTuple(args, "i", &n))
        return NULL;

    return Py_BuildValue("s", MAFW_METADATA_KEY_CHILDCOUNT(n));
}

%%
override mafw_source_get_update_progress noargs
static PyObject *
_wrap_mafw_source_get_update_progress(PyGObject *self)
{
    PyObject *results;
    int ret, processed, remaining_items, remaining_time;

    ret = mafw_source_get_update_progress( MAFW_SOURCE(self->obj), &processed,
                                          &remaining_items,
                                          &remaining_time);

    results = PyTuple_New(4);

    PyTuple_SetItem(results, 0, PyInt_FromLong(ret));
    PyTuple_SetItem(results, 1, PyInt_FromLong(processed));
    PyTuple_SetItem(results, 2, PyInt_FromLong(remaining_items));
    PyTuple_SetItem(results, 3, PyInt_FromLong(remaining_time));

    return results;
}
