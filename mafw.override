/* -*- Mode: C; c-basic-offset: 4 -*-
 * python-mafw - Python bindings for the MAFW library.
 *
 *   mafw.override: overrides for the mafw module.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 */
%%
headers
#define NO_IMPORT_PYGOBJECT
#include <pygobject.h>

#include "mafw-includes.h"
#include "mafw-types.h"

%%
modulename mafw

%%
import gobject.GObject as PyGObject_Type
import gobject.GObject as PyGInitiallyUnowned_Type

%%
ignore-glob *_get_type

%%
override mafw_playlist_manager_get noargs staticmethod
static PyObject *
_wrap_mafw_playlist_manager_get(PyGObject *self)
{
    MafwPlaylistManager *manager;

    manager = mafw_playlist_manager_get();

    return pygobject_new((GObject *)manager);
}

%%
override mafw_registry_get_instance noargs staticmethod
static PyObject *
_wrap_mafw_registry_get_instance(PyGObject *self)
{
    MafwRegistry *registry;

    registry = mafw_registry_get_instance();

    return pygobject_new((GObject *)registry);
}

%%
override mafw_playlist_manager_get_playlists noargs
static PyObject *
_wrap_mafw_playlist_manager_get_playlists(PyGObject *self)
{
    GPtrArray *list = NULL;
    PyObject *py_list;
    GError *errp = NULL;
    gint i;

    list = mafw_playlist_manager_get_playlists(MAFW_PLAYLIST_MANAGER(self->obj), &errp);

    if (pyg_error_check(&errp))
        return NULL;

    if (list == NULL) {
        PyErr_SetString(PyExc_RuntimeError, "could not get playlists");
        return NULL;
    }

    if ((py_list = PyList_New(list->len)) == NULL)
        return NULL;

    for (i = 0; i < list->len; i++) {
        MafwPlaylist *pl = (MafwPlaylist *)g_ptr_array_index (list, i);
        PyObject *item = pygobject_new((GObject *)pl);
        PyList_SetItem(py_list, i, item);
    }
    /* FIXME: currently leaks memory for the GPtrArray. */

    return py_list;
}

%%
override mafw_registry_get_renderers noargs
static PyObject *
_wrap_mafw_registry_get_renderers(PyGObject *self)
{
    GList *wlist;
    guint nwlist;
    int i;
    PyObject *list;

    wlist = mafw_registry_get_renderers(MAFW_REGISTRY(self->obj));
    nwlist = g_list_length(wlist);

    if ((list = PyList_New(nwlist)) == NULL)
        return NULL;

    for (i = 0; i < nwlist; i++) {
        PyObject *item = pygobject_new((GObject *)g_list_nth_data(wlist, i));
        PyList_SetItem(list, i, item);
    }
    g_list_free(wlist);

    return list;
}

%%
override mafw_registry_get_sources noargs
static PyObject *
_wrap_mafw_registry_get_sources(PyGObject *self)
{
    GList *wlist;
    guint nwlist;
    int i;
    PyObject *list;

    wlist = mafw_registry_get_sources(MAFW_REGISTRY(self->obj));
    nwlist = g_list_length(wlist);

    if ((list = PyList_New(nwlist)) == NULL)
        return NULL;

    for (i = 0; i < nwlist; i++) {
        PyObject *item = pygobject_new((GObject *)g_list_nth_data(wlist, i));
        PyList_SetItem(list, i, item);
    }
    g_list_free(wlist);

    return list;
}

typedef struct 
{
    PyObject_HEAD
    gchar *name;
    gchar *description;
    gchar *version;
} PyMafwPluginDescriptorPublic;

static void
pyplugin_descriptor_public_dealloc(PyMafwPluginDescriptorPublic *self)
{
    PyObject_DEL(self);
}

static PyMemberDef plugindescriptorpublic_members[] = {
    {"name", T_OBJECT_EX, offsetof(PyMafwPluginDescriptorPublic, name), 0, "name"},
    {"description", T_OBJECT_EX, offsetof(PyMafwPluginDescriptorPublic, description), 0, "description"},
    {"version", T_OBJECT_EX, offsetof(PyMafwPluginDescriptorPublic, version), 0, "version number"},
    {NULL}  /* Sentinel */
};

static PyObject *
plugindescriptorpublic_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    PyMafwPluginDescriptorPublic *self;

    self = (PyMafwPluginDescriptorPublic *)type->tp_alloc(type, 0);

    if (self != NULL) {
        self->name = PyString_FromString("");
        if (self->name == NULL) {
            Py_DECREF(self);
            return NULL;
        }

        self->description = PyString_FromString("");
        if (self->description == NULL) {
            Py_DECREF(self);
            return NULL;
        }

        self->version = PyString_FromString("");
        if (self->version == NULL) {
            Py_DECREF(self);
            return NULL;
        }
    }

    return (PyObject *)self;
}

PyTypeObject PyMafwPluginDescriptorPublic_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                  /* ob_size */
    "mafw.PluginDescriptorPublic",      /* tp_name */
    sizeof(PyMafwPluginDescriptorPublic), /* tp_basicsize */
    0,                                  /* tp_itemsize */
    /* methods */
    (destructor)pyplugin_descriptor_public_dealloc, /* tp_dealloc */
    (printfunc)0,                       /* tp_print */
    (getattrfunc)0,                     /* tp_getattr */
    (setattrfunc)0,                     /* tp_setattr */
    (cmpfunc)0,                         /* tp_compare */
    (reprfunc)0,                        /* tp_repr */
    0,                                  /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    (hashfunc)0,                        /* tp_hash */
    (ternaryfunc)0,                     /* tp_call */
    (reprfunc)0,                        /* tp_str */
    (getattrofunc)0,                    /* tp_getattro */
    (setattrofunc)0,                    /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                 /* tp_flags */
    "Information about a plugin",       /* Documentation string */
    (traverseproc)0,                    /* tp_traverse */
    (inquiry)0,                         /* tp_clear */
    (richcmpfunc)0,                     /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
    (getiterfunc)0,                     /* tp_iter */
    (iternextfunc)0,                    /* tp_iternext */
    0,                                  /* tp_methods */
    plugindescriptorpublic_members,     /* tp_members */
    0,                                  /* tp_getset */
    (PyTypeObject *)0,                  /* tp_base */
    (PyObject *)0,                      /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    (initproc)0,                        /* tp_init */
    0,                                  /* tp_alloc */
    plugindescriptorpublic_new,         /* tp_new */
    0,                                  /* tp_free */
    (inquiry)0,                         /* tp_is_gc */
    (PyObject *)0,                      /* tp_bases */
};

typedef struct 
{
    PyObject_HEAD
} PyMafwMetaData;

static void
py_mafwmetadata_dealloc(PyMafwMetaData *self)
{
    PyObject_DEL(self);
}

static PyObject *
PyMafwMetaData_get(PyMafwMetaData* self, PyObject *args)
{
    char *m;
    char *res;

    if (!PyArg_ParseTuple(args, "s", &m))
        return NULL;

    res = mafw_metadata_first (self, m);

    return res;
}

static PyMethodDef metadata_methods[] = {
    {"get", (PyCFunction)PyMafwMetaData_get, METH_VARARGS, ""},
    {NULL}  /* Sentinel */
};

PyTypeObject PyMafwMetaData_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                  /* ob_size */
    "mafw.MetaData",                    /* tp_name */
    sizeof(PyMafwMetaData),             /* tp_basicsize */
    0,                                  /* tp_itemsize */
    /* methods */
    (destructor)py_mafwmetadata_dealloc,/* tp_dealloc */
    (printfunc)0,                       /* tp_print */
    (getattrfunc)0,                     /* tp_getattr */
    (setattrfunc)0,                     /* tp_setattr */
    (cmpfunc)0,                         /* tp_compare */
    (reprfunc)0,                        /* tp_repr */
    0,                                  /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    (hashfunc)0,                        /* tp_hash */
    (ternaryfunc)0,                     /* tp_call */
    (reprfunc)0,                        /* tp_str */
    (getattrofunc)0,                    /* tp_getattro */
    (setattrofunc)0,                    /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                 /* tp_flags */
    "MetaData",       /* Documentation string */
    (traverseproc)0,                    /* tp_traverse */
    (inquiry)0,                         /* tp_clear */
    (richcmpfunc)0,                     /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
    (getiterfunc)0,                     /* tp_iter */
    (iternextfunc)0,                    /* tp_iternext */
    metadata_methods,                   /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    (PyTypeObject *)0,                  /* tp_base */
    (PyObject *)0,                      /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    (initproc)0,                        /* tp_init */
    0,                                  /* tp_alloc */
    0,                                  /* tp_new */
    0,                                  /* tp_free */
    (inquiry)0,                         /* tp_is_gc */
    (PyObject *)0,                      /* tp_bases */
};

%%
init
    if (PyType_Ready(&PyMafwPluginDescriptorPublic_Type) < 0) {
        g_return_if_reached();
    }
    if (PyDict_SetItemString(d, "PluginDescriptorPublic", (PyObject *)&PyMafwPluginDescriptorPublic_Type) < 0) {
        g_return_if_reached();
    }

    if (PyType_Ready(&PyMafwMetaData_Type) < 0) {
        g_return_if_reached();
    }
    if (PyDict_SetItemString(d, "MetaData", (PyObject *)&PyMafwMetaData_Type) < 0) {
        g_return_if_reached();
    }

%%
override mafw_registry_list_plugins noargs
static PyObject *
_wrap_mafw_registry_list_plugins(PyGObject *self)
{
    GList *wlist;
    guint nwlist;
    int i;
    PyObject *list;

    wlist = mafw_registry_list_plugins(MAFW_REGISTRY(self->obj));
    nwlist = g_list_length(wlist);

    if ((list = PyList_New(nwlist)) == NULL)
        return NULL;

    for (i = 0; i < nwlist; i++) {
        PyMafwPluginDescriptorPublic *item = pygobject_new((GObject *)g_list_nth_data(wlist, i));
        PyList_SetItem(list, i, item);
    }
    g_list_free(wlist);

    return list;
}

%%
override mafw_source_browse varargs
static PyObject *
_wrap_mafw_source_browse(PyObject *self, PyObject *args, PyObject *kwds)
{
    char *object_id;
    int recursive;
    char *filter;
    char *sort_criteria;
    char *metadata_keys;
    int skip_count;
    int item_count;
    PyObject *browse_cb;
    gpointer user_data = NULL;

    int browse_id = 0;

    if (!PyArg_ParseTuple(args, "ssO", &object_id, &metadata_keys, &browse_cb))
        return NULL;

    g_print("DEBUG::object_id: %s \n", object_id);
    g_print("DEBUG::metadata_keys: %s \n", metadata_keys);

    browse_id = mafw_source_browse(self,            /* Source */
                                   object_id,       /* Object identifier */
                                   FALSE,           /* Recursive */
                                   NULL,            /* Filter */
                                   NULL,            /* Sorting */
                                   metadata_keys,   /* Requested keys */
                                   0, 30,            /* Offset, Count*/
                                   browse_cb,        /* Callback */
                                   NULL);            /* User data */

    return Py_BuildValue("i", browse_id);
}

%%
define METADATA_KEY_CHILDCOUNT
static PyObject *
_wrap_METADATA_KEY_CHILDCOUNT(PyGObject *self, PyObject *args)
{
    int n;

    if (!PyArg_ParseTuple(args, "i", &n))
        return NULL;

    return Py_BuildValue("s", MAFW_METADATA_KEY_CHILDCOUNT(n));
}
